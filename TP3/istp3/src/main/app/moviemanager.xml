<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:twitter="http://www.mulesoft.org/schema/mule/twitter" xmlns:jdbc-ee="http://www.mulesoft.org/schema/mule/ee/jdbc" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/twitter http://www.mulesoft.org/schema/mule/twitter/2.4/mule-twitter.xsd
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd">

   
   <smtp:gmail-connector name="emailConnector" doc:name="Gmail"/>
   
    <spring:beans>
        <spring:bean name="myJaxb" class="javax.xml.bind.JAXBContext" factory-method="newInstance">
            <spring:constructor-arg value="client"/>
            <!-- colon-separated list of package names where JAXB classes exist -->
        </spring:bean>
    </spring:beans>
    <twitter:config name="Twitter" accessKey="2242782252-gE8EchziL7u6FHdDQ3zB3AkUwOFeHQzLuHotsZ0" accessSecret="ADpwtwX9ixNlUcuigQStlr4GJ4fSnHnFMOjyglfAv2ZNs" consumerKey="wUqvmYxy3hEndNTMCbkJw" consumerSecret="8aqYB9nSz1K5ZXyPMqeGfMnn4UVdIzVvYZsh3EhyA" doc:name="Twitter">
        <twitter:connection-pooling-profile initialisationPolicy="INITIALISE_ONE" exhaustedAction="WHEN_EXHAUSTED_GROW" maxWait="10"/>
    </twitter:config>

	
    <flow name="SoapAddMovieFlow" doc:name="SoapAddMovieFlow">
        <http:inbound-endpoint  exchange-pattern="request-response" host="localhost" port="8081" doc:name="HTTP" path="MovieManage"/>
        <logger message="Got a Soap Request to Add Movie" level="DEBUG" doc:name="Soap Request"/>
        <cxf:jaxws-service  doc:name="SOAP" serviceClass="services.IMovieManage"/>
        <component class="services.MovieManage" doc:name="Java"/>
        <flow-ref name="AddMovieDatabase" doc:name="AddMovie"/>
    </flow>
    <flow name="LocalFolderAddMovieFlow" doc:name="LocalFolderAddMovieFlow">
        <file:inbound-endpoint  responseTimeout="10000" doc:name="XMLFile Input" path="/home/jpbat/IS/eai/TP3/crawler/output"/>
        <flow-ref name="AddMovieDatabase" doc:name="AddMovie"/>


    </flow>
    <flow name="SendDigestEmail" doc:name="SendDigestEmail">
        <quartz:inbound-endpoint jobName="ASDGS" repeatInterval="120000" responseTimeout="10000" doc:name="Quartz">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="Select Movies not Sent" queryTimeout="-1" connector-ref="MovieDatabase" doc:name="Database">
            <jdbc-ee:query key="Select Movies not Sent" value="Select id, title from movie where sent = false and rate != 'PG' and rate != 'PG-13' and rate != 'G'"/>
        </jdbc-ee:outbound-endpoint>
        <set-variable variableName="movies" value="#[&quot;The movies had been added:\n&quot;]" doc:name="Movies"/>
        <foreach doc:name="For Each">
            <set-variable variableName="movies" value="#[movies+ payload['title'] + '\n ']" doc:name="Variable"/>
            <jdbc-ee:outbound-endpoint exchange-pattern="one-way" queryKey="update digest" queryTimeout="-1" connector-ref="MovieDatabase" doc:name="Database">
                <jdbc-ee:query key="update digest" value="update movie set sent = true where id = #[payload['id']]"/>
            </jdbc-ee:outbound-endpoint>
        </foreach>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="Select digest subscriptions" queryTimeout="-1" connector-ref="MovieDatabase" doc:name="Database">
            <jdbc-ee:query key="Select digest subscriptions" value="select email from subscription where sub_type = ' digest'"/>
        </jdbc-ee:outbound-endpoint>
        <set-variable variableName="emails" value="#[&quot;&quot;]" doc:name="emails"/>
        <foreach doc:name="For Each">
            <set-variable variableName="emails" value="#[emails+ payload['email'] + ', ']" doc:name="Variable"/>
        </foreach>
        <set-payload value="#[movies]" doc:name="Set Payload"/>
        <expression-filter expression="#[movies != &quot;The movies had been added:\n&quot; and emails != &quot;&quot;]" doc:name="Expression"/>
        <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="imdbcrawler%40gmail.com" responseTimeout="10000" doc:name="SMTP" from="imdbcrawler@gmail.com" password="KUctziBCOxkE" subject="Digest Email" to="#[emails]"/>
    </flow>
    <sub-flow name="AddMovieDatabase" doc:name="AddMovieDatabase">
        <mulexml:jaxb-xml-to-object-transformer name="Converter" returnClass="client.MovieList" jaxbContext-ref="myJaxb" doc:name="XML to JAXB Object"></mulexml:jaxb-xml-to-object-transformer>
        <set-session-variable variableName="MovieMailList" value="#[&quot;&quot;]" doc:name="Start Session var"/>
        <foreach  collection="#[payload.getMovie()]" doc:name="For Each">
            <set-variable variableName="m" value="#[payload]" doc:name="Store Movie for later"/>
            <jdbc-ee:outbound-endpoint  exchange-pattern="one-way" queryKey="Insert Movie" queryTimeout="-1" connector-ref="MovieDatabase" doc:name="Database">
                <jdbc-ee:query key="Insert Movie" value="INSERT INTO movie (title, rate, sent) VALUES ( #[payload.getName()], #[payload.getRate()], false);"/>
            </jdbc-ee:outbound-endpoint>
            <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="select max id" queryTimeout="-1" connector-ref="MovieDatabase" doc:name="Database">
                <jdbc-ee:query key="select max id" value="select max(id) from movie"/>
            </jdbc-ee:outbound-endpoint>
            <set-variable variableName="ID" value="#[payload[0]['max']]" doc:name="StoreID"/>
            <foreach collection="m.getGenres().getGenre()" doc:name="For Each">
                <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="get genre id" queryTimeout="-1" connector-ref="MovieDatabase" doc:name="Database">
                    <jdbc-ee:query key="get genre id" value="select id from genre where name = #[payload]"/>
                </jdbc-ee:outbound-endpoint>
                <set-variable variableName="genreId" value="#[Integer.parseInt(payload[0]['id'])]" doc:name="Variable"/>
                <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="add genre movie connection" queryTimeout="-1" connector-ref="MovieDatabase" doc:name="Database">
                    <jdbc-ee:query key="add genre movie connection" value="INSERT INTO movie_genre (movies_id, genres_id) VALUES (#[ID],  #[genreId])"/>
                </jdbc-ee:outbound-endpoint>
            </foreach>
            <choice doc:name="Choice">
                <when expression="#[m.getRate()=='G' || m.getRate()=='PG' || m.getRate()=='PG-13' ]">
                    <set-payload value="#[&quot;The movie: \&quot;&quot; + m.getName() + &quot;\&quot; was added!&quot;]" doc:name="Set Payload"/>
                </when>
                <otherwise>
                    <set-session-variable variableName="MovieMailList" value="#[sessionVars['MovieMailList'].concat(m.getName()+&quot;\n&quot;)]" doc:name="Re set var"/>
                </otherwise>
            </choice>
        </foreach>
        <set-variable variableName="emails" value="#[&quot;&quot;]" doc:name="Variable"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="get non-digest subscriptions" queryTimeout="-1" connector-ref="MovieDatabase" doc:name="get non-digest subscriptions">
            <jdbc-ee:query key="get non-digest subscriptions" value="select email from subscription where sub_type = ' non-digest' "/>
        </jdbc-ee:outbound-endpoint>
        <foreach doc:name="For Each">
            <set-variable variableName="emails" value="#[emails+ payload['email'] + ', ']" doc:name="Variable"/>
        </foreach>
        <set-payload value="#[sessionVars['MovieMailList']]" doc:name="Set Email"/>
        <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="imdbcrawler%40gmail.com" password="KUctziBCOxkE" to="#[emails]" from="imdbcrawler@gmail.com" subject="New Movies Added!" responseTimeout="10000" doc:name="SMTP"/>
    </sub-flow>


</mule>
